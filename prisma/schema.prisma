generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://kevin:MyNia2208%23%40%21@localhost:5432/taqa?connection_limit=40"
}

model Tenant {
  id                     Int                 @id @default(autoincrement())
  name                   String
  createdBy              String
  status                 TenantStatus        @default(ACTIVE)
  subscriptionPlan       String
  monthlyCharge          Float
  numberOfBags           Int?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  email                  String?
  phoneNumber            String?
  alternativePhoneNumber String?
  county                 String?
  town                   String?
  address                String?
  building               String?
  street                 String?
  website                String?
  logoUrl                String?
  allowedUsers           Int                 @default(1)
  paymentDetails         String?
  auditLogs              AuditLog[]
  customers              Customer[]
  GarbageCollection      GarbageCollection[]
  Invoice                Invoice[]
  mpesaConfig            MPESAConfig?
  MPESATransaction       MPESATransactions[]
  notifications          Notification[]
  Payment                Payment[]
  Receipt                Receipt[]
  SMS                    SMS[]
  smsConfig              SMSConfig?
  Task                   Task[]
  tenantInvoices         TenantInvoice[]
  tenantPayments         TenantPayment[]
  TrashBagIssuance       TrashBagIssuance[]
  users                  User[]

  UserActivity UserActivity[]

  PaymentLink PaymentLink[]
}

model TenantInvoice {
  id            String          @id @default(uuid())
  tenantId      Int
  invoicePeriod DateTime
  invoiceNumber String          @unique
  invoiceAmount Float
  status        InvoiceStatus   @default(UNPAID)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  amountPaid    Float           @default(0)
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments      TenantPayment[]
}

model TenantPayment {
  id              String        @id @default(uuid())
  tenantInvoiceId String
  tenantId        Int
  amount          Float
  modeOfPayment   ModeOfPayment
  transactionId   String?       @unique
  createdAt       DateTime      @default(now())
  tenant          Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantInvoice   TenantInvoice @relation(fields: [tenantInvoiceId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int                 @id @default(autoincrement())
  tenantId           Int
  firstName          String
  lastName           String
  email              String              @unique
  phoneNumber        String              @unique
  gender             String?
  county             String?
  town               String?
  password           String
  role               String[]
  customPermissions  Json?
  createdBy          Int?
  status             UserStatus          @default(ACTIVE)
  mfaEnabled         Boolean             @default(false)
  bagsHeld           Int?
  originalBagsIssued Int?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLogin          DateTime
  loginCount         Int                 @default(0)
  otpAttempts        Int                 @default(0)
  resetCode          String?
  resetCodeExpiresAt DateTime?
  AuditLog           AuditLog[]
  GarbageCollection  GarbageCollection[]
  notifications      Notification[]
  Task               Task[]
  TaskAssignee       TaskAssignee[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userActivities     UserActivity[]
  User_A             User[]              @relation("CreatedUsers")
  User_B             User[]              @relation("CreatedUsers")
}


model UserActivity {
  id          Int       @id @default(autoincrement())
  userId      Int
  tenantId    Int
  customerId  String?   // Optional: Links to the customer affected by the action
  action      String    // e.g., 'LOGIN', 'LOGOUT', 'VIEW', 'ADDED_CUSTOMER', 'UPDATED_CUSTOMER'
  timestamp   DateTime  @default(now())
   details     Json?     // Stores changed fields and their old/new values

  // Relationships
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([userId])
  @@index([customerId])
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    Int
  userId      Int
  action      String
  resource    String
  details     Json?
  description String?
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model SMSConfig {
  id                         Int      @id @default(autoincrement())
  tenantId                   Int      @unique
  partnerId                  String
  apiKey                     String
  shortCode                  String
  customerSupportPhoneNumber String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  tenant                     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MPESAConfig {
  id               Int                 @id @default(autoincrement())
  tenantId         Int                 @unique
  shortCode        String              @unique
  name             String
  apiKey           String
  passKey          String
  secretKey String @default("")

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  tenant           Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)


  MPESATransactions MPESATransactions[]
}

model Customer {
  id                   String              @id @default(uuid())
  tenantId             Int
  firstName            String
  lastName             String
  email                String?
  phoneNumber          String              @unique
  secondaryPhoneNumber String?
  gender               String?
  county               String?
  town                 String?
  location             String?
  estateName           String?
  building             String?
  houseNumber          String?
  category             String?
  monthlyCharge        Float
  status               CustomerStatus      @default(ACTIVE)
  garbageCollectionDay String
  collected            Boolean             @default(false)
  closingBalance       Float
  trashBagsIssued      Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  GarbageCollection    GarbageCollection[]
  invoices             Invoice[]
  receipts             Receipt[]
  trashbagsHistory     TrashBagIssuance[]
  possibleRefs         String[]      @default([])

  @@index([tenantId])
  @@index([phoneNumber])
  @@index([email])
  @@index([status])
  UserActivity UserActivity[]
  PaymentLink PaymentLink[]
}

model Invoice {
  id                String           @id @default(uuid())
  tenantId          Int
  customerId        String
  invoicePeriod     DateTime
  invoiceNumber     String           @unique
  invoiceAmount     Float
  closingBalance    Float
  status            InvoiceStatus    @default(UNPAID)
  isSystemGenerated Boolean
  createdAt         DateTime         @default(now())
  amountPaid        Float            @default(0)
  customer          Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items             InvoiceItem[]
  receiptInvoices   ReceiptInvoice[] @relation("InvoiceReceipts")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  description String
  amount      Float
  quantity    Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Receipt {
  id              String           @id @default(uuid())
  tenantId        Int
  receiptNumber   String           @unique
  amount          Float
  modeOfPayment   ModeOfPayment
  paidBy          String?
  transactionCode String?
  phoneNumber     String?
  paymentId       String           @unique
  customerId      String
  createdAt       DateTime         @default(now())
  customer        Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payment         Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
}

model ReceiptInvoice {
  id        String  @id @default(uuid())
  receiptId String
  invoiceId String
  invoice   Invoice @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
  receipt   Receipt @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  tenantId      Int
  amount        Float
  modeOfPayment ModeOfPayment
  firstName     String?
  receipted     Boolean       @default(false)
  transactionId String        @unique
  ref           String?
  receiptId     String?
  createdAt     DateTime      @default(now())
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  receipt       Receipt?
}



model PaymentLink {
  id                 Int       @id @default(autoincrement())
  token              String    @unique
  tenantId           Int
  customerId         String
  expiresAt          DateTime
  createdAt          DateTime  @default(now())
  paid               Boolean   @default(false)    // ← new
  // These will be filled in when you call the STK-Push API:
  merchantRequestId  String?   @unique
  checkoutRequestId  String?   @unique

  tenant             Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Notification {
  id        String   @id @default(uuid())
  tenantId  Int
  userId    Int
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SMS {
  id          String   @id @default(uuid())
  clientsmsid String   @unique
  mobile      String
  message     String
  status      String
  createdAt   DateTime @default(now())
  tenantId    Int
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model MPESATransactions {
  id            String      @id @default(uuid())
  tenantId      Int
  TransID       String      @unique
  TransTime     DateTime
  ShortCode     String
  TransAmount   Float
  BillRefNumber String
  MSISDN        String
  FirstName     String
  processed     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mpesaConfig   MPESAConfig @relation(fields: [ShortCode], references: [shortCode], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model GarbageCollection {
  id             String   @id @default(uuid())
  tenantId       Int
  customerId     String
  taskId         Int?
  collectedBy    Int?
  collectionDate DateTime @default(now())
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  collector      User?    @relation(fields: [collectedBy], references: [id])
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  task           Task?    @relation(fields: [taskId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Task {
  id                Int                 @id @default(autoincrement())
  tenantId          Int
  createdBy         Int
  type              TaskType
  status            TaskStatus          @default(PENDING)
  declaredBags      Int?
  remainingBags     Int?
  assignedAt        DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  GarbageCollection GarbageCollection[]
  creator           User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  taskAssignees     TaskAssignee[]
  trashBagIssuances TrashBagIssuance[]

  @@index([tenantId])
}

model TaskAssignee {
  id               Int                @id @default(autoincrement())
  taskId           Int
  assigneeId       Int
  assignedAt       DateTime           @default(now())
  assignee         User               @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  task             Task               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  TrashBagIssuance TrashBagIssuance[]

  @@unique([taskId, assigneeId])
}

model TrashBagIssuance {
  id         String        @id @default(uuid())
  taskId     Int
  customerId String
  tenantId   Int
  issuedDate DateTime      @default(now())
  bagsIssued Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  issuedById Int?
  customer   Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  issuedBy   TaskAssignee? @relation(fields: [issuedById], references: [id])
  task       Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tenant     Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([issuedById])
}

enum TenantStatus {
  ACTIVE
  DISABLED
  EXPIRED
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

enum ModeOfPayment {
  CASH
  MPESA
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
}

enum TaskType {
  BAG_ISSUANCE
  PAYMENT_COLLECTION
  CUSTOMER_FEEDBACK
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}
